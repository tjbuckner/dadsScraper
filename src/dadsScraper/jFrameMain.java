package dadsScraper;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.SocketTimeoutException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

public class jFrameMain extends javax.swing.JFrame {

    String columnNames[] = {
        "MAKE MODEL", "YEAR", "DATE ON LOT", "ROW"
    };
    String nums[] = {
        "7", "8", "9", "89", "11", "107", "12", "90", "13",
        "110", "91", "14", "15", "117", "16", "17", "71", "18", "19",
        "115", "20", "108", "21", "22", "92", "23", "24", "25", "26",
        "27", "112", "93", "28", "29", "30", "31", "32", "33", "61",
        "94", "34", "69", "67", "35", "95", "72", "96", "36", "37",
        "38", "62", "39", "97", "40", "41", "42", "44", "73", "98",
        "45", "46", "47", "48", "50", "99", "111", "51", "52", "100",
        "101", "53", "102", "54", "116", "55", "56", "57", "58", "59",
        "103", "60"
    };

    int arrayX = 1500;
    int arrayY = 4;

    String[][] data = new String[arrayX][arrayY];

    DateFormat dateFormatNew = new SimpleDateFormat("MM/dd/yyyy");
    Date dateNew = new Date();
    int num;
    String today = dateFormatNew.format(dateNew);

    int rowNum = 0;
    int entries = 0;
    
    double percent = 0;

    DateFormat dateFormat = new SimpleDateFormat("yyyy_MM_dd_HH_mm");
    Date date = new Date();

    String filePath = System.getProperty("user.home") + "\\Desktop\\excel_" + dateFormat.format(date) + ".tsv";

    File file = new File(filePath);

    /**
     * Creates new form jFrameMain
     */
    public jFrameMain() {
        setResizable(false);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonRun = new javax.swing.JButton();
        jButtonExport = new javax.swing.JButton();
        jScrollPaneForTable = new javax.swing.JScrollPane();
        jTableData = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jProgressBar1 = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Pull-A-Part Scraper");

        jButtonRun.setText("RUN");
        jButtonRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRunActionPerformed(evt);
            }
        });

        jButtonExport.setText("EXPORT");
        jButtonExport.setEnabled(false);
        jButtonExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExportActionPerformed(evt);
            }
        });

        jTableData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "MAKE MODEL", "YEAR", "DATE ON LOT", "ROW"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPaneForTable.setViewportView(jTableData);

        jTextPane1.setEditable(false);
        jTextPane1.setName(""); // NOI18N
        jScrollPane1.setViewportView(jTextPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jButtonRun, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonExport, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPaneForTable))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPaneForTable, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 21, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonRun, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonExport, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRunActionPerformed
        //repaint();
        Thread scrapeThread = new Thread() {
            public void run(){
                scrape();
            }
        };
        scrapeThread.start();
    
        
    }//GEN-LAST:event_jButtonRunActionPerformed
    
    private void updateProgress(){
        jTextPane1.setText("Percent completed: " + (int) percent + "% (" + num + " out of " + nums.length + " || Entries Collected: " + entries / 4 + ")");
        jProgressBar1.setValue((int)percent);
    }
    private void scrape(){
        jButtonRun.setEnabled(false);
        for (String[] row : data) {
            Arrays.fill(row, "");
        }
        try {
            for (int i = 0; i < nums.length; i++) {
                String url = "http://www.pullapart.com/inventory/search.aspx?LocId=10&MakeId=" + nums[i];

                Document doc = Jsoup.connect(url).timeout(20 * 1000).get();
                num = i;
                percent = ((double) i * 100.0f) / (double) nums.length;
                
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        updateProgress();
                    }
                });
                

                boolean beenIncremented = false;

                for (Element table : doc.select("table.gridview")) {
                    for (Element row : table.select("tr")) {
                        Elements tds = row.select("td");
                        if (tds.size() > 4) {
                            for (int x = 1; x < 5; x++) {
                                if (tds.get(3).text().equals(today)) {
                                    data[entries / 4][x - 1] = tds.get(x).text();
                                    if (!beenIncremented) {
                                        entries++;
                                        beenIncremented = true;
                                    }

                                }
                                beenIncremented = false;
                            }
                            rowNum++;
                        }
                    }
                }
            }

            jTableData.setModel(new DefaultTableModel(data, columnNames));
            jButtonExport.setEnabled(true);
            jButtonRun.setEnabled(true);
        } catch (SocketTimeoutException ste) {
            JOptionPane.showMessageDialog(null, "Connection has timed out!");
        } catch (IOException ex) {
            Logger.getLogger(jFrameMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void jButtonExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExportActionPerformed
        toExcel(jTableData, file);
    }//GEN-LAST:event_jButtonExportActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(jFrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(jFrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(jFrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(jFrameMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new jFrameMain().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonExport;
    private javax.swing.JButton jButtonRun;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPaneForTable;
    private javax.swing.JTable jTableData;
    private javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables

    private void toExcel(JTable table, File file) {
        try {
            TableModel model = table.getModel();
            FileWriter excel = new FileWriter(file);

            for (int i = 0; i < model.getColumnCount(); i++) {
                excel.write(model.getColumnName(i) + "\t");
            }

            excel.write("\n");

            for (int i = 0; i < model.getRowCount(); i++) {
                for (int j = 0; j < model.getColumnCount(); j++) {
                    try {
                        if (model.getValueAt(i, j).toString() == null) {
                            excel.write(" ");
                        } else {
                            excel.write(model.getValueAt(i, j).toString() + "\t");
                        }
                    } catch (NullPointerException e) {
                        JOptionPane.showMessageDialog(table, e + " at " + i + "," + j);
                    }
                }
                excel.write("\n");
            }

            excel.close();
            JOptionPane.showMessageDialog(rootPane, "Excel file successfully saved to desktop as excel_" + dateFormat.format(date) + ".tsv!");

        } catch (IOException e) {
            System.out.println(e);
        }
    }
}
